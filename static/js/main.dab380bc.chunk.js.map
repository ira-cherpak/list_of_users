{"version":3,"sources":["api/people.js","api/api.js","components/CommentForm/CommentForm.jsx","types.jsx","components/CommentDetails/CommentDetails.jsx","components/UsersList/UsersList.jsx","App.jsx","index.js"],"names":["getAllPeople","fetch","then","response","ok","Error","status","statusText","json","result","results","CommentForm","userId","addComment","useState","commentText","setCommentText","error","setError","className","onSubmit","event","preventDefault","trim","name","placeholder","value","onChange","target","type","TypeComments","PropTypes","arrayOf","shape","id","number","isRequired","body","string","CommentDetails","url","birth_year","comments","person","deleteComment","map","comment","onClick","UserList","people","length","App","setPeople","useEffect","localStorage","JSON","parse","getItem","peopleFromServer","peopleWithComments","setItem","stringify","newComment","Date","prevPeople","commentId","newComments","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dab380bc.chunk.js","sourcesContent":["import { request } from './api';\n\nexport const getAllPeople = () => request();\n","export const BASE_URL = 'https://swapi.dev/api/people/';\n\nexport const request = () => fetch(`${BASE_URL}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.results);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CommentForm.scss';\n\nexport const CommentForm = ({ userId, addComment }) => {\n  const [commentText, setCommentText] = useState('');\n  const [error, setError] = useState(false);\n\n  return (\n    <form\n      className=\"CommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (commentText.trim()) {\n          addComment(commentText, userId);\n          setCommentText('');\n        } else {\n          setError(true);\n        }\n      }}\n    >\n      {error && (\n        <p className=\"CommentForm__error\">Fill out the filds </p>\n      )}\n      <div>\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"CommentForm__input\"\n          value={commentText}\n          onChange={(event) => {\n            setCommentText(event.target.value);\n            setError(false);\n          }}\n        />\n      </div>\n      <button\n        type=\"submit\"\n        className=\"CommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nCommentForm.propTypes = {\n  userId: PropTypes.string.isRequired,\n  addComment: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypeComments = PropTypes.arrayOf(PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n}).isRequired);\n\nexport const TypePerson = PropTypes.shape({\n  url: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  birth_year: PropTypes.string.isRequired,\n  comments: TypeComments.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeComments } from '../../types';\nimport './CommentDetails.scss';\n\nexport const CommentDetails = ({ person, deleteComment }) => (\n  <ul className=\"CommentDetails__list\">\n    {person.comments.map(comment => (\n      <li\n        className=\"CommentDetails__list-item\"\n        key={comment.id}\n      >\n        <button\n          type=\"button\"\n          className=\"CommentDetails__remove-button button\"\n          onClick={() => deleteComment(person.url, comment.id)}\n        >\n          X\n        </button>\n        <p>{comment.body}</p>\n      </li>\n    ))}\n  </ul>\n);\n\nCommentDetails.propTypes = {\n  person: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    comments: TypeComments.isRequired,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CommentForm } from '../CommentForm/CommentForm';\nimport { CommentDetails } from '../CommentDetails/CommentDetails';\nimport { TypePerson } from '../../types';\nimport './UsersList.scss';\n\nexport const UserList = ({ people, addComment, deleteComment }) => (\n  <div className=\"UsersList\">\n    <h2>Users:</h2>\n    <ul className=\"UsersList__list\">\n      {people.map((person) => {\n        const { url, name, birth_year, comments } = person;\n\n        return (\n          <li className=\"UsersList__item\" key={url}>\n            <div className=\"UsersList__title\">\n              <h3>\n                {name}\n              </h3>\n              <p>\n                (\n                {birth_year}\n                {' '}\n                year of birth)\n              </p>\n            </div>\n\n            <div className=\"UsersList__content\">\n              <h3>Leave comment</h3>\n              <CommentForm\n                userId={url}\n                addComment={addComment}\n              />\n\n              {comments.length > 0 && (\n                <div className=\"CommentDetails\">\n                  <h3>Comments:</h3>\n                  <CommentDetails\n                    person={person}\n                    deleteComment={deleteComment}\n                  />\n                </div>\n              )}\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  </div>\n);\n\nUserList.propTypes = {\n  people: PropTypes.arrayOf(TypePerson.isRequired).isRequired,\n  addComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/button.scss';\nimport { getAllPeople } from './api/people';\nimport { UserList } from './components/UsersList/UsersList';\n\nexport const App = () => {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.people) {\n      setPeople(JSON.parse(localStorage.getItem('people')));\n    } else {\n      getAllPeople()\n        .then((peopleFromServer) => {\n          const peopleWithComments = peopleFromServer.map(person => ({\n            ...person, comments: [],\n          }));\n\n          setPeople(peopleWithComments);\n        });\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('people', JSON.stringify(people));\n  }, [people]);\n\n  const addComment = (commentText, userId) => {\n    const newComment = {\n      userId,\n      id: +new Date(),\n      body: commentText,\n    };\n\n    setPeople(prevPeople => prevPeople.map((person) => {\n      if (person.url === userId) {\n        return {\n          ...person, comments: [...person.comments, newComment],\n        };\n      }\n\n      return person;\n    }));\n  };\n\n  const deleteComment = (userId, commentId) => {\n    setPeople(prevPeople => prevPeople.map((person) => {\n      if (person.url === userId) {\n        const newComments = person.comments.filter(comment => comment.id !== commentId);\n\n        return {\n          ...person, comments: newComments,\n        };\n      }\n\n      return person;\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <UserList\n          people={people}\n          addComment={addComment}\n          deleteComment={deleteComment}\n        />\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}